{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? process.env.REACT_APP_API_URL || '/api' : 'http://localhost:5000/api';\nexport const analyzeUrl = async url => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/detect`, {\n      url: url\n    }, {\n      timeout: 30000,\n      // 30 second timeout\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      withCredentials: false\n    });\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error(response.data.message || 'Analysis failed');\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response, _error$response2, _error$response2$data;\n      if (error.code === 'ECONNABORTED') {\n        throw new Error('Analysis timed out. Please try again.');\n      }\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 429) {\n        throw new Error('Too many requests. Please wait a moment and try again.');\n      }\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.message) {\n        throw new Error(error.response.data.message);\n      }\n    }\n    throw new Error('Failed to analyze URL. Please check your connection and try again.');\n  }\n};\nexport const checkHealth = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/health`, {\n      timeout: 5000\n    });\n    return response.data.status === 'OK';\n  } catch {\n    return false;\n  }\n};\nexport const getAnalytics = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/analytics`, {\n      timeout: 10000\n    });\n    return response.data.data;\n  } catch (error) {\n    throw new Error('Failed to fetch analytics');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","REACT_APP_API_URL","analyzeUrl","url","response","post","timeout","headers","withCredentials","data","success","Error","message","error","isAxiosError","_error$response","_error$response2","_error$response2$data","code","status","checkHealth","get","getAnalytics"],"sources":["C:/Users/harsh/Downloads/Phishing Detection and Resonse System/client/src/services/phishingService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { AnalysisResult } from '../types';\r\n\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? process.env.REACT_APP_API_URL || '/api'\r\n  : 'http://localhost:5000/api';\r\n\r\nexport const analyzeUrl = async (url: string): Promise<AnalysisResult> => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/detect`, {\r\n      url: url\r\n    }, {\r\n      timeout: 30000, // 30 second timeout\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n      },\r\n      withCredentials: false\r\n    });\r\n\r\n    if (response.data.success) {\r\n      return response.data.data;\r\n    } else {\r\n      throw new Error(response.data.message || 'Analysis failed');\r\n    }\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error)) {\r\n      if (error.code === 'ECONNABORTED') {\r\n        throw new Error('Analysis timed out. Please try again.');\r\n      }\r\n      if (error.response?.status === 429) {\r\n        throw new Error('Too many requests. Please wait a moment and try again.');\r\n      }\r\n      if (error.response?.data?.message) {\r\n        throw new Error(error.response.data.message);\r\n      }\r\n    }\r\n    \r\n    throw new Error('Failed to analyze URL. Please check your connection and try again.');\r\n  }\r\n};\r\n\r\nexport const checkHealth = async (): Promise<boolean> => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/health`, {\r\n      timeout: 5000\r\n    });\r\n    return response.data.status === 'OK';\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getAnalytics = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/analytics`, {\r\n      timeout: 10000\r\n    });\r\n    return response.data.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch analytics');\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACtDF,OAAO,CAACC,GAAG,CAACE,iBAAiB,IAAI,MAAM,GACvC,2BAA2B;AAE/B,OAAO,MAAMC,UAAU,GAAG,MAAOC,GAAW,IAA8B;EACxE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGR,YAAY,SAAS,EAAE;MAC1DM,GAAG,EAAEA;IACP,CAAC,EAAE;MACDG,OAAO,EAAE,KAAK;MAAE;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACZ,CAAC;MACDC,eAAe,EAAE;IACnB,CAAC,CAAC;IAEF,IAAIJ,QAAQ,CAACK,IAAI,CAACC,OAAO,EAAE;MACzB,OAAON,QAAQ,CAACK,IAAI,CAACA,IAAI;IAC3B,CAAC,MAAM;MACL,MAAM,IAAIE,KAAK,CAACP,QAAQ,CAACK,IAAI,CAACG,OAAO,IAAI,iBAAiB,CAAC;IAC7D;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,IAAIjB,KAAK,CAACkB,YAAY,CAACD,KAAK,CAAC,EAAE;MAAA,IAAAE,eAAA,EAAAC,gBAAA,EAAAC,qBAAA;MAC7B,IAAIJ,KAAK,CAACK,IAAI,KAAK,cAAc,EAAE;QACjC,MAAM,IAAIP,KAAK,CAAC,uCAAuC,CAAC;MAC1D;MACA,IAAI,EAAAI,eAAA,GAAAF,KAAK,CAACT,QAAQ,cAAAW,eAAA,uBAAdA,eAAA,CAAgBI,MAAM,MAAK,GAAG,EAAE;QAClC,MAAM,IAAIR,KAAK,CAAC,wDAAwD,CAAC;MAC3E;MACA,KAAAK,gBAAA,GAAIH,KAAK,CAACT,QAAQ,cAAAY,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgBP,IAAI,cAAAQ,qBAAA,eAApBA,qBAAA,CAAsBL,OAAO,EAAE;QACjC,MAAM,IAAID,KAAK,CAACE,KAAK,CAACT,QAAQ,CAACK,IAAI,CAACG,OAAO,CAAC;MAC9C;IACF;IAEA,MAAM,IAAID,KAAK,CAAC,oEAAoE,CAAC;EACvF;AACF,CAAC;AAED,OAAO,MAAMS,WAAW,GAAG,MAAAA,CAAA,KAA8B;EACvD,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMR,KAAK,CAACyB,GAAG,CAAC,GAAGxB,YAAY,SAAS,EAAE;MACzDS,OAAO,EAAE;IACX,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACK,IAAI,CAACU,MAAM,KAAK,IAAI;EACtC,CAAC,CAAC,MAAM;IACN,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMlB,QAAQ,GAAG,MAAMR,KAAK,CAACyB,GAAG,CAAC,GAAGxB,YAAY,YAAY,EAAE;MAC5DS,OAAO,EAAE;IACX,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACK,IAAI,CAACA,IAAI;EAC3B,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAM,IAAIF,KAAK,CAAC,2BAA2B,CAAC;EAC9C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}